std::string ShaderExplodeSmoothVolumes::geometryShaderText =
"uniform float explodeV;\n"
"uniform float explodeF;\n"
"uniform mat4 ModelViewProjectionMatrix;\n"
"uniform mat4 NormalMatrix;\n"
"uniform mat4 ModelViewMatrix;\n"
"uniform vec3 lightPosition;\n"
"\n"
"uniform vec4 plane;\n"
"\n"
"VARYING_IN vec3 colorVertex[4];\n"
"VARYING_IN vec3 normalVertex[4];\n"
"\n"
"\n"
"VARYING_OUT vec3 normalFS;\n"
"VARYING_OUT vec3 lightFS;\n"
"VARYING_OUT vec3 colorVert;\n"
"\n"
"void main(void)\n"
"{\n"
"	float d = dot(plane,POSITION_IN(0));\n"
"	\n"
"	if (d<=0.0)\n"
"	{\n"
"		for (int i=1; i<=3; i++)\n"
"		{\n"
"			// explode in face\n"
"			vec4 P = explodeF * POSITION_IN(i)  + (1.0-explodeF)* vec4(colorVertex[0],1.0);\n"
"			// compute vextex illum from pos & normal \n"
"			vec3 L =  normalize (lightPosition - P.xyz);\n"
"			\n"
"			vec3 N = normalize (vec3(NormalMatrix*vec4(normalVertex[i],0.0))); \n"
"			\n"
"			// explode in volume\n"
"			vec4 Q = explodeV *  P + (1.0-explodeV)* POSITION_IN(0);\n"
"			gl_Position = ModelViewProjectionMatrix *  Q;\n"
"\n"
"			colorVert = colorVertex[i];\n"
"			normalFS = N;\n"
"			lightFS = L;\n"
"			\n"
"			EmitVertex();\n"
"		}\n"
"		EndPrimitive();\n"
"	}\n"
"}\n";

