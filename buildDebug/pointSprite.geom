std::string PointSprite::geometryShaderText =
"\n"
"uniform float size;\n"
"uniform mat4 ModelViewMatrix;\n"
"uniform mat4 ProjectionMatrix;\n"
"\n"
"#ifdef WITH_PLANE\n"
"uniform vec3 eyePos;\n"
"VARYING_OUT vec3 shiftedEye;\n"
"#endif\n"
"\n"
"VARYING_OUT vec2 spriteCoord;\n"
"VARYING_OUT vec3 sphereCenter;\n"
"\n"
"#ifdef WITH_COLOR_PER_VERTEX \n"
"VARYING_IN vec4 color[1];\n"
"VARYING_OUT vec4 colorsprite;\n"
"#endif\n"
"\n"
"#ifdef WITH_PLANE\n"
"void corner( vec4 center, vec3 planeX, vec3 planeY, float x, float y)\n"
"{\n"
"	spriteCoord = vec2(x,y);\n"
"	vec4 pos = center + size*( x*vec4(planeX,0.0) + y*vec4(planeY,0.0)+ vec4(0.0,0.0,0.5,0.0));\n"
"	gl_Position = ProjectionMatrix *  pos;\n"
"	EmitVertex();\n"
"}\n"
"#else\n"
"void corner( vec4 center, float x, float y)\n"
"{\n"
"	spriteCoord = vec2(x,y);\n"
"	vec4 pos = center + vec4(size*x, size*y, 0.0, 0.0);\n"
"	gl_Position = ProjectionMatrix *  pos;\n"
"	EmitVertex();\n"
"}\n"
"#endif\n"
"\n"
"void main()\n"
"{\n"
"#ifdef WITH_COLOR_PER_VERTEX \n"
"	colorsprite = color[0];\n"
"#endif\n"
"\n"
"	vec4 posCenter = ModelViewMatrix * POSITION_IN(0);\n"
"	sphereCenter = posCenter.xyz;\n"
"	\n"
"#ifdef WITH_PLANE\n"
"	shiftedEye = eyePos - sphereCenter;\n"
"	vec3 V = -shiftedEye;\n"
"	normalize(V);\n"
"\n"
"	vec3 planeX = vec3(-V[2],0.0,V[0]); //cross(V, vec3(0.0,1.0,0.0));\n"
"	normalize(planeX);\n"
"	vec3 planeY = cross(planeX,V);\n"
"\n"
"	corner(posCenter, planeX, planeY, -1.4, 1.4);\n"
"	corner(posCenter, planeX, planeY, -1.4,-1.4);\n"
"	corner(posCenter, planeX, planeY,  1.4, 1.4);\n"
"	corner(posCenter, planeX, planeY,  1.4,-1.4);\n"
"#else\n"
"	corner(posCenter, -1.4, 1.4);\n"
"	corner(posCenter, -1.4,-1.4);\n"
"	corner(posCenter,  1.4, 1.4);\n"
"	corner(posCenter,  1.4,-1.4);\n"
"#endif	\n"
"\n"
"	EndPrimitive();\n"
"}\n";

