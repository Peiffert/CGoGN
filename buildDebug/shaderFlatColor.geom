std::string ShaderFlatColor::geometryShaderText =
"uniform float explode;\n"
"uniform mat4 ModelViewProjectionMatrix;\n"
"uniform mat4 NormalMatrix;\n"
"uniform mat4 ModelViewMatrix;\n"
"uniform vec3 lightPosition;\n"
"uniform vec4 ambient;\n"
"\n"
"VARYING_IN vec3 colorVertex[3]; // input is triangles -> 3\n"
"VARYING_OUT vec4 ColorFS;\n"
"\n"
"void main(void)\n"
"{\n"
"	vec3 v1 = POSITION_IN(1).xyz - POSITION_IN(0).xyz;\n"
"	vec3 v2 = POSITION_IN(2).xyz - POSITION_IN(0).xyz;\n"
"	vec3 N  = cross(v1,v2);\n"
"	N  =  normalize (vec3(NormalMatrix*vec4(N,0.0))); \n"
"	vec3 center = POSITION_IN(0).xyz + POSITION_IN(1).xyz + POSITION_IN(2).xyz; \n"
"	center /= 3.0;\n"
"	vec4 newPos =  ModelViewMatrix * vec4(center,0.0);\n"
"	vec3 L =  normalize (lightPosition - newPos.xyz);\n"
"	float lambertTerm = dot(N,L);\n"
"\n"
"#ifdef AVERAGE_COLOR		\n"
"	int i;\n"
"	vec3 averageColor=vec3(0.,0.,0.);\n"
"	for(i=0; i< 3; i++)\n"
"		averageColor +=colorVertex[i];\n"
"	averageColor /= 3.0;\n"
"	\n"
"	ColorFS = ambient;\n"
"	if(lambertTerm > 0.0)\n"
"		ColorFS += vec4(averageColor,1.0) * lambertTerm;\n"
"			\n"
"	for(i=0; i< 3; i++)\n"
"	{\n"
"		vec4 pos =  explode * POSITION_IN(i) + (1.0-explode)* vec4(center,1.0);\n"
"		gl_Position = ModelViewProjectionMatrix *  pos;	\n"
"		EmitVertex();\n"
"	}\n"
"	EndPrimitive();\n"
"#else\n"
"	int i;\n"
"	for(i=0; i< 3; i++)\n"
"	{\n"
"		vec4 pos =  explode * POSITION_IN(i) + (1.0-explode)* vec4(center,1.0);\n"
"		ColorFS = ambient;\n"
"		if(lambertTerm > 0.0)\n"
"			ColorFS += vec4(colorVertex[i],1.0) * lambertTerm;\n"
"		gl_Position = ModelViewProjectionMatrix *  pos;\n"
"		EmitVertex();\n"
"	}\n"
"	EndPrimitive();\n"
"#endif\n"
"\n"
"}\n";

