std::string ShaderPhong::fragmentShaderText =
"\n"
"PRECISON;\n"
"VARYING_FRAG vec3 EyeVector, Normal, LightDir;\n"
"#ifdef WITH_COLOR\n"
"VARYING_FRAG vec3 Color;\n"
"#endif\n"
"uniform vec4 materialDiffuse;\n"
"uniform vec4 materialSpecular;\n"
"uniform vec4 materialAmbient;\n"
"uniform float shininess;\n"
"FRAG_OUT_DEF;\n"
"void main()\n"
"{\n"
"	vec3 N = normalize (Normal);\n"
"	vec3 L = normalize (LightDir);\n"
"	//float lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"\n"
"	vec4 finalColor = materialAmbient;\n"
"\n"
"#ifdef DOUBLE_SIDED\n"
"	float lambertTerm;\n"
"	vec4 diffuseColor = materialDiffuse;\n"
"	if (!gl_FrontFacing)\n"
"	{\n"
"		N *= -1.0;\n"
"		lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"	}\n"
"	else\n"
"		lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"#ifndef WITH_COLOR\n"
"	finalColor += materialDiffuse * lambertTerm;\n"
"#else\n"
"	finalColor += vec4((Color*lambertTerm),0.0) ;\n"
"#endif\n"
"	vec3 E = normalize(EyeVector);\n"
"	vec3 R = reflect(-L, N);\n"
"	float specular = pow( max(dot(R, E), 0.0), shininess );\n"
"	finalColor += materialSpecular * specular;\n"
"#else\n"
"	float lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"	if (gl_FrontFacing)\n"
"	{\n"
"#ifndef WITH_COLOR\n"
"		finalColor += materialDiffuse * lambertTerm;\n"
"#else\n"
"		finalColor += vec4((Color*lambertTerm),0.0) ;\n"
"#endif\n"
"		vec3 E = normalize(EyeVector);\n"
"		vec3 R = reflect(-L, N);\n"
"		float specular = pow( max(dot(R, E), 0.0), shininess );\n"
"		finalColor += materialSpecular * specular;\n"
"	}\n"
"#endif\n"
"	gl_FragColor=finalColor;\n"
"}\n";

