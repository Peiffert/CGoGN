std::string ShaderSimpleFlat::fragmentShaderText =
"\n"
"PRECISON;\n"
"VARYING_FRAG vec3 LightDir;\n"
"VARYING_VERT vec3 Position;\n"
"#ifdef WITH_COLOR\n"
"VARYING_FRAG vec3 Color;\n"
"#endif\n"
"uniform vec4 materialDiffuse;\n"
"uniform vec4 materialSpecular;\n"
"uniform vec4 materialAmbient;\n"
"uniform float shininess;\n"
"FRAG_OUT_DEF;\n"
"//layout(location = 0) out vec3 gl_FragColor;\n"
"\n"
"void main()\n"
"{\n"
"	vec3 DX = dFdx(Position);\n"
"	vec3 DY = dFdy(Position);\n"
"	vec3 N=normalize(cross(DX,DY));\n"
"\n"
"	vec3 L = normalize (LightDir);\n"
"\n"
"	vec4 finalColor = materialAmbient;\n"
"\n"
"#ifdef DOUBLE_SIDED\n"
"	float lambertTerm;\n"
"	vec4 diffuseColor = materialDiffuse;\n"
"	if (!gl_FrontFacing)\n"
"	{\n"
"		N *= -1.0;\n"
"		lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"	}\n"
"	else\n"
"		lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"#ifndef WITH_COLOR\n"
"	finalColor += materialDiffuse * lambertTerm;\n"
"#else\n"
"	finalColor += vec4((Color*lambertTerm),0.0) ;\n"
"#endif\n"
"#else\n"
"	float lambertTerm = clamp(dot(N,L),0.0,1.0);\n"
"	if (gl_FrontFacing)\n"
"	{\n"
"#ifndef WITH_COLOR\n"
"		finalColor += materialDiffuse * lambertTerm;\n"
"#else\n"
"		finalColor += vec4((Color*lambertTerm),0.0) ;\n"
"#endif\n"
"	}\n"
"#endif\n"
"        //gl_FragColor=finalColor;\n"
"        gl_FragColor = vec4((N[0]+1.0)/2.0,(N[1]+1.0)/2.0,(N[2]+1.0)/2.0,0.0);\n"
"}\n";

